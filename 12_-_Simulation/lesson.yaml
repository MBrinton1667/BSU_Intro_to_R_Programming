- Class: meta
  Course: BSU_Intro_to_R_Programming
  Lesson: 12-Simulation
  Author: Nick Carchedi with edits made by Mitchell Brinton MA Boise State University
  Type: Standard
  Organization: Boise State University
  Version: 2.4.5
  
- Class: text
  Output: One of the great advantages of using a statistical programming language like R is its vast collection of tools for simulating random numbers.  In many of the previous application sections, you did just that making fake datasets.

- Class: text
  Output: This lesson deals with a few common probability distributions, but these topics will only be discussed with respect to random number generation. Even if you have no prior experience with these concepts, you should be able to complete the lesson and understand the main ideas.

- Class: cmd_question
  Output: The first function we'll use to generate random numbers is sample(). Use ?sample to pull up the documentation.
  CorrectAnswer: ?sample
  AnswerTests: omnitest(correctExpr='?sample')
  Hint: Use '?sample' to pull up the documentation for the sample() function.

- Class: cmd_question
  Output: "Let's simulate rolling four six-sided dice: sample(1:6, 4, replace = TRUE)."
  CorrectAnswer: sample(1:6, 4, replace = TRUE)
  AnswerTests: match_call('sample(1:6, 4, replace = TRUE)')
  Hint: Type sample(1:6, 4, replace = TRUE) to simulate rolling four six-sided dice.

- Class: cmd_question
  Output: Now repeat the command to see how your result differs. (The probability of rolling the exact same result is (1/6)^4 = 0.00077, which is pretty small!)
  CorrectAnswer: sample(1:6, 4, replace = TRUE)
  AnswerTests: match_call('sample(1:6, 4, replace = TRUE)')
  Hint: Type sample(1:6, 4, replace = TRUE) to simulate rolling four six-sided dice again.

- Class: text
  Output: sample(1:6, 4, replace = TRUE) instructs R to randomly select four numbers between 1 and 6, WITH replacement. Sampling with replacement simply means that each number is "replaced" after it is selected, so that the same number can show up more than once. This is what we want here, since what you roll on one die shouldn't affect what you roll on any of the others. Sampling without replacement would imply our six-sided die magically transformed into a five-sided die after rolling it the first time.

- Class: cmd_question
  Output: Now sample 10 numbers between 1 and 20, WITHOUT replacement. To sample without replacement, simply leave off the 'replace' argument.  The default for the sample() function is replace = F.
  CorrectAnswer: sample(1:20, 10)
  AnswerTests: match_call('sample(1:20, 10)')
  Hint: Type sample(1:20, 10) to sample 10 numbers between 1 and 20, without replacement.

- Class: text
  Output: Since the last command sampled without replacement, no number appears more than once in the output.

- Class: cmd_question
  Output: LETTERS is a predefined variable in R containing a vector of all 26 letters of the English alphabet. Take a look at it now.
  CorrectAnswer: LETTERS
  AnswerTests: omnitest(correctExpr='LETTERS')
  Hint: Type LETTERS to print its contents to the console.

- Class: cmd_question
  Output: The sample() function can also be used to permute, or rearrange, the elements of a vector. For example, try sample(LETTERS) to permute all 26 letters of the English alphabet.
  CorrectAnswer: sample(LETTERS)
  AnswerTests: omnitest(correctExpr='sample(LETTERS)')
  Hint: Use sample(LETTERS) to permute all 26 letters of the English alphabet.

- Class: text
  Output: This is identical to taking a sample of size 26 from LETTERS, without replacement. When the 'size' argument to sample() is not specified, R takes a sample equal in size to the vector from which you are sampling.

- Class: text
  Output: Now, suppose we want to simulate 100 flips of an unfair two-sided coin. This particular coin has a 0.3 probability of landing 'tails' and a 0.7 probability of landing 'heads'.

- Class: cmd_question
  Output: Let the value 0 represent tails and the value 1 represent heads. Use sample() to draw a sample of size 100 from the vector c(0,1), with replacement. Since the coin is unfair, we must attach specific probabilities to the values 0 (tails) and 1 (heads) with a fourth argument, prob = c(0.3, 0.7). Assign the result to a new variable called flips.
  CorrectAnswer: flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
  AnswerTests: match_call('flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))')
  Hint: 'The following command will produce 100 flips of an unfair coin and assign the result: flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))'

- Class: cmd_question
  Output: View the contents of the flips variable.
  CorrectAnswer: flips
  AnswerTests: omnitest(correctExpr='flips')
  Hint: Just type flips to view its contents.

- Class: cmd_question
  Output: Since we set the probability of landing heads on any given flip to be 0.7, we'd expect approximately 70 of our coin flips to have the value 1. Count the actual number of 1s contained in flips using the sum() function.
  CorrectAnswer: sum(flips)
  AnswerTests: omnitest(correctExpr='sum(flips)')
  Hint: sum(flips) will add up all the 1s and 0s, giving you the total number of 1s in flips.
  
- Class: cmd_question
  Output: Depending on how many different possibilities there are the sum function may not be the way to go.  For instance, you couldn't use sum() the same way to count how many fives were rolled after rolling 100 die.  I'll show you a surefire way to count any possibility.  Type -- summary(factor(flips))
  CorrectAnswer: summary(factor(flips))
  AnswerTests: omnitest(correctExpr='summary(factor(flips))')
  Hint: summary(factor(flips))

- Class: cmd_question
  Output: A coin flip is a binary outcome (0 or 1) and we are performing 100 independent trials (coin flips), so we can use rbinom() to simulate a binomial random variable. Pull up the documentation for rbinom() using ?rbinom
  CorrectAnswer: ?rbinom
  AnswerTests: omnitest(correctExpr='?rbinom')
  Hint: Type ?rbinom to pull up the help file for rbinom().

- Class: text
  Output: Each probability distribution in R has an r*** function (for "random"), a d*** function (for "density"), a p*** (for "probability"), and q*** (for "quantile"). If you foresee stats classes in your future, these functions will be extremely helpful.  We are most interested in the r*** functions in this lesson, but I encourage you to explore the others on your own.

- Class: cmd_question
  Output: A binomial random variable represents the number of 'successes' (heads) in a given number of independent 'trials' (coin flips). Therefore, we can generate a single random variable that represents the number of heads in 100 flips of our unfair coin using rbinom(1, size = 100, prob = 0.7). Note that you only specify the probability of 'success' (heads) and NOT the probability of 'failure' (tails). Try it now.
  CorrectAnswer: rbinom(1, size = 100, prob = 0.7)
  AnswerTests: match_call('rbinom(1, size = 100, prob = 0.7)')
  Hint: Call rbinom() with n = 1, size = 100, and prob = 0.7.

- Class: cmd_question
  Output: Equivalently, if we want to see all of the 0s and 1s, we can request 100 observations, each of size 1, with success probability of 0.7. Give it a try, assigning the result to a new variable called flips2.
  CorrectAnswer: flips2 <- rbinom(100, size = 1, prob = 0.7)
  AnswerTests: match_call('flips2 <- rbinom(100, size = 1, prob = 0.7)')
  Hint: Call rbinom() with n = 100, size = 1, and prob = 0.7 and assign the result to flips2.

- Class: cmd_question
  Output: View the contents of flips2.
  CorrectAnswer: flips2
  AnswerTests: omnitest('flips2')
  Hint: Type flips2 to view its contents.

- Class: cmd_question
  Output: Now use sum() to count the number of 1s (heads) in flips2. It should be close to 70!
  CorrectAnswer: sum(flips2)
  AnswerTests: omnitest('sum(flips2)')
  Hint: Use sum(flips2) to count the number of 1s.

- Class: cmd_question
  Output: Similar to rbinom(), we can use R to simulate random numbers from many other probability distributions. Pull up the documentation for rnorm() now.
  CorrectAnswer: ?rnorm
  AnswerTests: omnitest('?rnorm')
  Hint: Type ?rnorm to view its help file.

- Class: cmd_question
  Output: The standard normal distribution has mean 0 and standard deviation 1. As you can see under the 'Usage' section in the documentation, the default values for the 'mean' and 'sd' arguments to rnorm() are 0 and 1, respectively. Thus, rnorm(10) will generate 10 random numbers from a standard normal distribution; 10 z-scores if you're familiar. Give it a try.
  CorrectAnswer: rnorm(10)
  AnswerTests: omnitest('rnorm(10)')
  Hint: Use rnorm(10) to generate 10 random numbers from a standard normal distribution.

- Class: cmd_question
  Output: Now do the same, except with a mean of 100 and a standard deviation of 25.  These are no longer z-scores since the mean and sd are no longer 0 and 1 respectively.
  CorrectAnswer: rnorm(10, 100, 25)
  AnswerTests: match_call('rnorm(10, 100, 25)')
  Hint: Use rnorm(10, mean = 100, sd = 25) to generate 10 random numbers from a normal distribution with mean 100 and standard deviation 25.

- Class: text
  Output: Finally, what if we want to simulate 100 *groups* of random numbers, each containing 5 values generated from a Poisson distribution with mean 10? Let's start with one group of 5 numbers, then I'll show you how to repeat the operation 100 times in a convenient and compact way.

- Class: cmd_question
  Output: Generate 5 random values from a Poisson distribution with mean 10. Check out the documentation for rpois() if you need help.
  CorrectAnswer: rpois(5, 10)
  AnswerTests: match_call('rpois(5, 10)')
  Hint: Use rpois(5, 10) to generate 5 random numbers from a Poisson distribution with mean 10.

- Class: cmd_question
  Output: Now use replicate(100, rpois(5, 10)) to perform this operation 100 times. Store the result in a new variable called my_pois.
  CorrectAnswer: my_pois <- replicate(100, rpois(5, 10))
  AnswerTests: match_call('my_pois <- replicate(100, rpois(5, 10))')
  Hint: my_pois <- replicate(100, rpois(5, 10)) will repeat the operation 100 times and store the result.

- Class: cmd_question
  Output: Take a look at the contents of my_pois.
  CorrectAnswer: my_pois
  AnswerTests: omnitest('my_pois')
  Hint: Print the contents of my_pois to the console.

- Class: cmd_question
  Output: replicate() created a matrix, each column of which contains 5 random numbers generated from a Poisson distribution with mean 10. Now we can find the mean of each column in my_pois using the colMeans() function. Store the result in a variable called cm.
  CorrectAnswer: cm <- colMeans(my_pois)
  AnswerTests: omnitest('cm <- colMeans(my_pois)')
  Hint: Use cm <- colMeans(my_pois) to create a vector of column means, storing the result in cm.

- Class: cmd_question
  Output: And let's take a look at the distribution of our column means by plotting a histogram with hist(cm).
  CorrectAnswer: hist(cm)
  AnswerTests: omnitest('hist(cm)')
  Hint: hist(cm) will give you a histogram of column means.

- Class: text
  Output: Looks like our column means are almost normally distributed, right? That's the Central Limit Theorem at work, but that's a lesson for another day!

- Class: text
  Output: All of the standard probability distributions are built into R, including exponential (rexp()), chi-squared (rchisq()), gamma (rgamma()), .... Well, you see the pattern.

- Class: text
  Output: Simulation is practically a field of its own and we've only skimmed the surface of what's possible. I encourage you to explore these and other functions further on your own.  You'll find them useful if your journey takes you to the mystical realm of statistics.

- Class: text
  Output:  "This final section will detail the usefulness, relevance, and application of what you just learned in this Swirl lesson."

- Class: text
  Output: You may be thinking to yourself--"Flipping 100 weighted coins is only fun for like 6 hours, is there a real application here?"--Yes, yes there is.
  
- Class: text
  Output: A major portion of statistics is determining if one set of numbers differs significantly from another set of numbers or a theoretical (simulated) set of numbers.
  
- Class: text
  Output: It's fake story time.  Your friend just got back from Vegas after losing horribly at the craps table.  They were so furious that they stole the two pink dice from the casino.  Knowing you're in an R class, they pleaded with you to see if their dice were faulty with statistics and simulations.
  
- Class: cmd_question
  Output: Because you love your friend so much, you decided to roll the two dice they gave you 1000 times. You recorded the sum of the two dice after each roll.  The resulting distribution is in the convenient function friends_dice().  Type friends_dice() to see the results of your hard work.
  CorrectAnswer: friends_dice()
  AnswerTests: omnitest('friends_dice()')
 
- Class: text
  Output: There doesn't seem to be anything too fishy going on, at least to the naked eye.  But you're not satisfied. You need to plot 1000 'fair' dice rolls and compare it to the results from the pink dice. Since you can't trust that any old set of dice you find are not weighted and your arm is tired from the 1000 previous rolls, you decide to use R.
  
- Class: cmd_question
  Output: You need to simulate a completely random rolling of two dice 1000 times and store it in a variable.  To do this run -- fair_dice <- replicate(2, sample(1:6, 1000, replace = T))
  CorrectAnswer: fair_dice <- replicate(2, sample(1:6, 1000, replace =T))
  AnswerTests: omnitest('fair_dice <- replicate(2, sample(1:6, 1000, replace =T))')
  
- Class: cmd_question
  Output: Next, we need to add both of our repetitions together along each pair and save it to the same variable. To do this type -- fair_dice <- apply(fair_dice, 1, sum)
  CorrectAnswer: fair_dice <- apply(fair_dice, 1, sum)
  AnswerTests: omnitest('fair_dice <- apply(fair_dice, 1, sum)')
  
- Class: cmd_question
  Output: Lastly, we're going to overlay this fair dice distribution on top of the pink Vegas distribution to see if there are any differences between the potentially loaded dice and computer simulated dice.  Type -- hist(fair_dice, col = "blue", add = T)
  CorrectAnswer: hist(fair_dice, col = "blue", add = T)
  AnswerTests: omnitest('hist(fair_dice, col = "blue", add = T)')

- Class: text
  Output: Yup! There are certainly some discrepancies there.  It looks like your friend played with dice rigged to land on the higher numbers of the dice.

- Class: text
  Output:  "This next one is fun.  I attached a dataset that represents the male to female ratio of 58 cultures around the world.  If you don't believe me navigate to: https://d-place.org/parameters/SCCS1689#2/14.2/149.0"
  
- Class: text
  Output:  The data from that website is multiplied by 10 but I divided it by ten so that it is centered around 1.  Meaning, anything less than one means more females in the society with anything greater than one meaning more males. I also cut out two outliers for the purposes of this demonstration.
  
- Class: cmd_question
  Output: I stored the results in a variable called x. Let's make another histogram. This time we don't want frequency on the y axis since we're going to plot a simulated normal density curve on top of our histogram.  Type -- hist(x, freq = F)
  CorrectAnswer: hist(x, freq = F)
  AnswerTests: omnitest('hist(x, freq = F)')
 
- Class: cmd_question
  Output:  This looks relatively bell-shaped, which is good.  Let's see what the perfect normal distribution looks like by adding a simulated normal curve based on the data.  Basically, what would it look like if our Sex Ratio variable was perfectly normally distributed?  Type -- curve(dnorm(x, mean = mean(x), sd = sd(x)), add = T)
  CorrectAnswer: curve(dnorm(x, mean = mean(x), sd = sd(x)), add = T)
  AnswerTests: omnitest('curve(dnorm(x, mean = mean(x), sd = sd(x)), add = T)')

- Class: text
  Output: It's pretty close.  It definitely has a slight positive skew, though.  Looks like the majority of societies in the dataset have slightly more women. I hope you had fun in this demo!
